{"version":3,"sources":["Quizz/QuizzQuestion.js","Quizz/QuizzQuestions.js","Quizz/QuizzAnswer.js","Quizz/QuizzAnswers.js","Quizz/QuizzContainer.js","Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["QuizzQuestion","props","className","this","data","question","React","Component","QuizzQuestions","QuizzAnswer","answers","map","answer","i","type","value","onClick","QuizzAnswers","QuizzContainer","randomQuestion","Math","floor","random","questions","length","state","randomKey","randomQuestionIndex","points","completeQuestions","getAnswer","bind","e","preventDefault","currentCompleteQuestions","push","target","correctIndex","currentPoints","setState","Footer","App","quizzData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"o0CAGqBA,G,wBACjB,WAAYC,GAAQ,qEACVA,I,sEAGN,OACI,yBAAKC,UAAU,kBACX,2BAAIC,KAAKF,MAAMG,KAAKC,SAApB,U,GAP2BC,IAAMC,YCC5BC,E,YACjB,WAAYP,GAAQ,qEACVA,I,sEAGN,OACI,yBAAKC,UAAU,mBACX,kBAAC,EAAD,CAAeE,KAAMD,KAAKF,MAAMG,Y,GAPJE,IAAMC,WCD7BE,G,kBACjB,WAAYR,GAAQ,qEACVA,I,sEAEA,IAAD,OACCS,EAAUP,KAAKF,MAAMG,KAAKM,QAAQC,KAAI,SAACC,EAAQC,GAAT,OACxC,4BAAQC,KAAK,OAAOZ,UAAU,YAAYa,MAAOF,EAAGG,QAAS,EAAKf,MAAMW,QAASA,MAErF,OACI,yBAAKV,UAAU,gBACX,yBAAKA,UAAU,QACVQ,Q,GAXoBJ,IAAMC,YCC1BU,G,kBACjB,WAAYhB,GAAQ,qEACVA,I,sEAGN,OACI,yBAAKC,UAAU,iBACX,kBAAC,EAAD,CAAaE,KAAMD,KAAKF,MAAMG,KAAMQ,OAAQT,KAAKF,MAAMW,c,GAP7BN,IAAMC,YCC3BW,G,kBACjB,WAAYjB,GAAQ,IAAD,sBACf,4CAAMA,IACN,IAAMkB,EAAiBC,KAAKC,MAAMD,KAAKE,SAAW,EAAKrB,MAAMG,KAAKmB,UAAUC,QAF7D,OAGf,EAAKC,MAAQ,CACTC,UAAW,EAAKzB,MAAMG,KAAKmB,UAAUJ,GACrCQ,oBAAqBR,EACrBS,OAAQ,EACRC,kBAAmB,IAEvB,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBATF,E,uEAYTC,GACNA,EAAEC,iBACF,IAAMC,EAA2B/B,KAAKsB,MAAMI,kBACtCV,EAAiBC,KAAKC,MAAMD,KAAKE,SAAWnB,KAAKF,MAAMG,KAAKmB,UAAUC,QAE5E,GADAU,EAAyBC,KAAKhC,KAAKsB,MAAME,qBACtCK,EAAEI,OAAOrB,OAASZ,KAAKsB,MAAMC,UAAUW,aAAa,CACnD,IAAMC,EAAgBnC,KAAKsB,MAAMG,OAAS,EAC1CzB,KAAKoC,SAAS,CACVX,OAAQU,IAGhBnC,KAAKoC,SAAS,CACVb,UAAWvB,KAAKF,MAAMG,KAAKmB,UAAUJ,GACrCU,kBAAmBK,EACnBP,oBAAqBR,M,+BAKzB,OACI,yBAAKjB,UAAU,mBACX,kBAAC,EAAD,CAAgBE,KAAMD,KAAKsB,MAAMC,YACjC,kBAAC,EAAD,CAActB,KAAMD,KAAKsB,MAAMC,UAAWd,OAAQT,KAAK2B,iB,GAnC3BxB,IAAMC,YCF7BiC,G,uLAEb,OACI,gCAAQ,yD,GAHgBlC,IAAMC,Y,OCc3BkC,G,uLATX,OACE,yBAAKvC,UAAU,OACb,kBAAC,EAAD,CAAgBE,KAAMsC,IACtB,kBAAC,EAAD,W,GALUnC,cCMEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e715fd93.chunk.js","sourcesContent":["import React from 'react';\r\nimport './css/QuizzQuestion.css'\r\n\r\nexport default class QuizzQuestion extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"quizz-question\">\r\n                <p>{this.props.data.question}:</p>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './css/QuizzQuestions.css';\r\nimport QuizzQuestion from './QuizzQuestion';\r\n\r\nexport default class QuizzQuestions extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"quizz-questions\">\r\n                <QuizzQuestion data={this.props.data}/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './css/QuizzAnswer.css';\r\n\r\nexport default class QuizzAnswer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        const answers = this.props.data.answers.map((answer, i) => \r\n            <button type=\"text\" className=\"grid-item\" value={i} onClick={this.props.answer}>{answer}</button>\r\n        );\r\n        return (\r\n            <div className=\"quizz-answer\">\r\n                <div className=\"grid\">\r\n                    {answers}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport QuizzAnswer from './QuizzAnswer';\r\nimport './css/QuizzAnswers.css';\r\n\r\nexport default class QuizzAnswers extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"quizz-answers\">\r\n                <QuizzAnswer data={this.props.data} answer={this.props.answer}/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport QuizzQuestions from './QuizzQuestions';\r\nimport QuizzAnswers from './QuizzAnswers';\r\nimport './css/QuizzContainer.css';\r\n\r\nexport default class QuizzContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const randomQuestion = Math.floor(Math.random() * this.props.data.questions.length);\r\n        this.state = {\r\n            randomKey: this.props.data.questions[randomQuestion],\r\n            randomQuestionIndex: randomQuestion,\r\n            points: 0,\r\n            completeQuestions: []\r\n        }\r\n        this.getAnswer = this.getAnswer.bind(this);\r\n    }\r\n\r\n    getAnswer(e) {\r\n        e.preventDefault();\r\n        const currentCompleteQuestions = this.state.completeQuestions;\r\n        const randomQuestion = Math.floor(Math.random() * this.props.data.questions.length)\r\n        currentCompleteQuestions.push(this.state.randomQuestionIndex)\r\n        if(e.target.value == this.state.randomKey.correctIndex){\r\n            const currentPoints = this.state.points + 1;\r\n            this.setState({\r\n                points: currentPoints\r\n            })\r\n        }\r\n        this.setState({\r\n            randomKey: this.props.data.questions[randomQuestion],\r\n            completeQuestions: currentCompleteQuestions,\r\n            randomQuestionIndex: randomQuestion\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"quizz-container\">\r\n                <QuizzQuestions data={this.state.randomKey} />\r\n                <QuizzAnswers data={this.state.randomKey} answer={this.getAnswer}/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './css/Footer.css';\r\n\r\nexport default class Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <footer><p>&copy; 2020 Marek Klatt</p></footer>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\nimport QuizzContainer from './Quizz/QuizzContainer';\nimport Footer from './Footer/Footer';\nimport quizzData from './Database/quizz.json';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <QuizzContainer data={quizzData}/>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}